/**
 * Public event api of the router
 */
export class Navigate {
    static { this.type = '[Router] Navigate'; }
    constructor(path, queryParams, extras) {
        this.path = path;
        this.queryParams = queryParams;
        this.extras = extras;
    }
}
/**
 *
 * Angular Routers internal state events
 *
 */
/**
 * An action dispatched when the router starts the navigation.
 */
export class RouterRequest {
    static { this.type = '[Router] RouterRequest'; }
    constructor(routerState, event, trigger = 'none') {
        this.routerState = routerState;
        this.event = event;
        this.trigger = trigger;
    }
}
/**
 * An action dispatched when the router navigates.
 */
export class RouterNavigation {
    static { this.type = '[Router] RouterNavigation'; }
    constructor(routerState, event, trigger = 'none') {
        this.routerState = routerState;
        this.event = event;
        this.trigger = trigger;
    }
}
/**
 * An action dispatched when the router cancel navigation.
 */
export class RouterCancel {
    static { this.type = '[Router] RouterCancel'; }
    constructor(routerState, storeState, event, trigger = 'none') {
        this.routerState = routerState;
        this.storeState = storeState;
        this.event = event;
        this.trigger = trigger;
    }
}
/**
 * An action dispatched when the router errors.
 */
export class RouterError {
    static { this.type = '[Router] RouterError'; }
    constructor(routerState, storeState, event, trigger = 'none') {
        this.routerState = routerState;
        this.storeState = storeState;
        this.event = event;
        this.trigger = trigger;
    }
}
/**
 * An action dispatched when the `ResolveEnd` event is triggered.
 */
export class RouterDataResolved {
    static { this.type = '[Router] RouterDataResolved'; }
    constructor(routerState, event, trigger = 'none') {
        this.routerState = routerState;
        this.event = event;
        this.trigger = trigger;
    }
}
/**
 * An action dispatched when the router navigation has been finished successfully.
 */
export class RouterNavigated {
    static { this.type = '[Router] RouterNavigated'; }
    constructor(routerState, event, trigger = 'none') {
        this.routerState = routerState;
        this.event = event;
        this.trigger = trigger;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVyLmFjdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wYWNrYWdlcy9yb3V0ZXItcGx1Z2luL3NyYy9yb3V0ZXIuYWN0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFjQTs7R0FFRztBQUNILE1BQU0sT0FBTyxRQUFRO2FBQ0gsU0FBSSxHQUFHLG1CQUFtQixDQUFDO0lBRTNDLFlBQ1MsSUFBVyxFQUNYLFdBQW9CLEVBQ3BCLE1BQXlCO1FBRnpCLFNBQUksR0FBSixJQUFJLENBQU87UUFDWCxnQkFBVyxHQUFYLFdBQVcsQ0FBUztRQUNwQixXQUFNLEdBQU4sTUFBTSxDQUFtQjtJQUMvQixDQUFDOztBQUdOOzs7O0dBSUc7QUFFSDs7R0FFRztBQUNILE1BQU0sT0FBTyxhQUFhO2FBQ1IsU0FBSSxHQUFHLHdCQUF3QixDQUFDO0lBRWhELFlBQ1MsV0FBYyxFQUNkLEtBQXNCLEVBQ3RCLFVBQXlCLE1BQU07UUFGL0IsZ0JBQVcsR0FBWCxXQUFXLENBQUc7UUFDZCxVQUFLLEdBQUwsS0FBSyxDQUFpQjtRQUN0QixZQUFPLEdBQVAsT0FBTyxDQUF3QjtJQUNyQyxDQUFDOztBQUdOOztHQUVHO0FBQ0gsTUFBTSxPQUFPLGdCQUFnQjthQUNYLFNBQUksR0FBRywyQkFBMkIsQ0FBQztJQUVuRCxZQUNTLFdBQWMsRUFDZCxLQUF1QixFQUN2QixVQUF5QixNQUFNO1FBRi9CLGdCQUFXLEdBQVgsV0FBVyxDQUFHO1FBQ2QsVUFBSyxHQUFMLEtBQUssQ0FBa0I7UUFDdkIsWUFBTyxHQUFQLE9BQU8sQ0FBd0I7SUFDckMsQ0FBQzs7QUFHTjs7R0FFRztBQUNILE1BQU0sT0FBTyxZQUFZO2FBQ1AsU0FBSSxHQUFHLHVCQUF1QixDQUFDO0lBRS9DLFlBQ1MsV0FBYyxFQUNkLFVBQWEsRUFDYixLQUF1QixFQUN2QixVQUF5QixNQUFNO1FBSC9CLGdCQUFXLEdBQVgsV0FBVyxDQUFHO1FBQ2QsZUFBVSxHQUFWLFVBQVUsQ0FBRztRQUNiLFVBQUssR0FBTCxLQUFLLENBQWtCO1FBQ3ZCLFlBQU8sR0FBUCxPQUFPLENBQXdCO0lBQ3JDLENBQUM7O0FBR047O0dBRUc7QUFDSCxNQUFNLE9BQU8sV0FBVzthQUNOLFNBQUksR0FBRyxzQkFBc0IsQ0FBQztJQUU5QyxZQUNTLFdBQWMsRUFDZCxVQUFhLEVBQ2IsS0FBc0IsRUFDdEIsVUFBeUIsTUFBTTtRQUgvQixnQkFBVyxHQUFYLFdBQVcsQ0FBRztRQUNkLGVBQVUsR0FBVixVQUFVLENBQUc7UUFDYixVQUFLLEdBQUwsS0FBSyxDQUFpQjtRQUN0QixZQUFPLEdBQVAsT0FBTyxDQUF3QjtJQUNyQyxDQUFDOztBQUdOOztHQUVHO0FBQ0gsTUFBTSxPQUFPLGtCQUFrQjthQUNiLFNBQUksR0FBRyw2QkFBNkIsQ0FBQztJQUVyRCxZQUNTLFdBQWMsRUFDZCxLQUFpQixFQUNqQixVQUF5QixNQUFNO1FBRi9CLGdCQUFXLEdBQVgsV0FBVyxDQUFHO1FBQ2QsVUFBSyxHQUFMLEtBQUssQ0FBWTtRQUNqQixZQUFPLEdBQVAsT0FBTyxDQUF3QjtJQUNyQyxDQUFDOztBQUdOOztHQUVHO0FBQ0gsTUFBTSxPQUFPLGVBQWU7YUFDVixTQUFJLEdBQUcsMEJBQTBCLENBQUM7SUFFbEQsWUFDUyxXQUFjLEVBQ2QsS0FBb0IsRUFDcEIsVUFBeUIsTUFBTTtRQUYvQixnQkFBVyxHQUFYLFdBQVcsQ0FBRztRQUNkLFVBQUssR0FBTCxLQUFLLENBQWU7UUFDcEIsWUFBTyxHQUFQLE9BQU8sQ0FBd0I7SUFDckMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIE5hdmlnYXRpb25DYW5jZWwsXG4gIE5hdmlnYXRpb25FcnJvcixcbiAgTmF2aWdhdGlvbkV4dHJhcyxcbiAgUGFyYW1zLFxuICBSb3V0ZXJTdGF0ZVNuYXBzaG90LFxuICBSb3V0ZXNSZWNvZ25pemVkLFxuICBSZXNvbHZlRW5kLFxuICBOYXZpZ2F0aW9uU3RhcnQsXG4gIE5hdmlnYXRpb25FbmRcbn0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcblxuaW1wb3J0IHsgUm91dGVyVHJpZ2dlciB9IGZyb20gJy4vcm91dGVyLnN0YXRlJztcblxuLyoqXG4gKiBQdWJsaWMgZXZlbnQgYXBpIG9mIHRoZSByb3V0ZXJcbiAqL1xuZXhwb3J0IGNsYXNzIE5hdmlnYXRlIHtcbiAgc3RhdGljIHJlYWRvbmx5IHR5cGUgPSAnW1JvdXRlcl0gTmF2aWdhdGUnO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBwYXRoOiBhbnlbXSxcbiAgICBwdWJsaWMgcXVlcnlQYXJhbXM/OiBQYXJhbXMsXG4gICAgcHVibGljIGV4dHJhcz86IE5hdmlnYXRpb25FeHRyYXNcbiAgKSB7fVxufVxuXG4vKipcbiAqXG4gKiBBbmd1bGFyIFJvdXRlcnMgaW50ZXJuYWwgc3RhdGUgZXZlbnRzXG4gKlxuICovXG5cbi8qKlxuICogQW4gYWN0aW9uIGRpc3BhdGNoZWQgd2hlbiB0aGUgcm91dGVyIHN0YXJ0cyB0aGUgbmF2aWdhdGlvbi5cbiAqL1xuZXhwb3J0IGNsYXNzIFJvdXRlclJlcXVlc3Q8VCA9IFJvdXRlclN0YXRlU25hcHNob3Q+IHtcbiAgc3RhdGljIHJlYWRvbmx5IHR5cGUgPSAnW1JvdXRlcl0gUm91dGVyUmVxdWVzdCc7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHJvdXRlclN0YXRlOiBULFxuICAgIHB1YmxpYyBldmVudDogTmF2aWdhdGlvblN0YXJ0LFxuICAgIHB1YmxpYyB0cmlnZ2VyOiBSb3V0ZXJUcmlnZ2VyID0gJ25vbmUnXG4gICkge31cbn1cblxuLyoqXG4gKiBBbiBhY3Rpb24gZGlzcGF0Y2hlZCB3aGVuIHRoZSByb3V0ZXIgbmF2aWdhdGVzLlxuICovXG5leHBvcnQgY2xhc3MgUm91dGVyTmF2aWdhdGlvbjxUID0gUm91dGVyU3RhdGVTbmFwc2hvdD4ge1xuICBzdGF0aWMgcmVhZG9ubHkgdHlwZSA9ICdbUm91dGVyXSBSb3V0ZXJOYXZpZ2F0aW9uJztcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcm91dGVyU3RhdGU6IFQsXG4gICAgcHVibGljIGV2ZW50OiBSb3V0ZXNSZWNvZ25pemVkLFxuICAgIHB1YmxpYyB0cmlnZ2VyOiBSb3V0ZXJUcmlnZ2VyID0gJ25vbmUnXG4gICkge31cbn1cblxuLyoqXG4gKiBBbiBhY3Rpb24gZGlzcGF0Y2hlZCB3aGVuIHRoZSByb3V0ZXIgY2FuY2VsIG5hdmlnYXRpb24uXG4gKi9cbmV4cG9ydCBjbGFzcyBSb3V0ZXJDYW5jZWw8VCwgViA9IFJvdXRlclN0YXRlU25hcHNob3Q+IHtcbiAgc3RhdGljIHJlYWRvbmx5IHR5cGUgPSAnW1JvdXRlcl0gUm91dGVyQ2FuY2VsJztcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcm91dGVyU3RhdGU6IFYsXG4gICAgcHVibGljIHN0b3JlU3RhdGU6IFQsXG4gICAgcHVibGljIGV2ZW50OiBOYXZpZ2F0aW9uQ2FuY2VsLFxuICAgIHB1YmxpYyB0cmlnZ2VyOiBSb3V0ZXJUcmlnZ2VyID0gJ25vbmUnXG4gICkge31cbn1cblxuLyoqXG4gKiBBbiBhY3Rpb24gZGlzcGF0Y2hlZCB3aGVuIHRoZSByb3V0ZXIgZXJyb3JzLlxuICovXG5leHBvcnQgY2xhc3MgUm91dGVyRXJyb3I8VCwgViA9IFJvdXRlclN0YXRlU25hcHNob3Q+IHtcbiAgc3RhdGljIHJlYWRvbmx5IHR5cGUgPSAnW1JvdXRlcl0gUm91dGVyRXJyb3InO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyByb3V0ZXJTdGF0ZTogVixcbiAgICBwdWJsaWMgc3RvcmVTdGF0ZTogVCxcbiAgICBwdWJsaWMgZXZlbnQ6IE5hdmlnYXRpb25FcnJvcixcbiAgICBwdWJsaWMgdHJpZ2dlcjogUm91dGVyVHJpZ2dlciA9ICdub25lJ1xuICApIHt9XG59XG5cbi8qKlxuICogQW4gYWN0aW9uIGRpc3BhdGNoZWQgd2hlbiB0aGUgYFJlc29sdmVFbmRgIGV2ZW50IGlzIHRyaWdnZXJlZC5cbiAqL1xuZXhwb3J0IGNsYXNzIFJvdXRlckRhdGFSZXNvbHZlZDxUID0gUm91dGVyU3RhdGVTbmFwc2hvdD4ge1xuICBzdGF0aWMgcmVhZG9ubHkgdHlwZSA9ICdbUm91dGVyXSBSb3V0ZXJEYXRhUmVzb2x2ZWQnO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyByb3V0ZXJTdGF0ZTogVCxcbiAgICBwdWJsaWMgZXZlbnQ6IFJlc29sdmVFbmQsXG4gICAgcHVibGljIHRyaWdnZXI6IFJvdXRlclRyaWdnZXIgPSAnbm9uZSdcbiAgKSB7fVxufVxuXG4vKipcbiAqIEFuIGFjdGlvbiBkaXNwYXRjaGVkIHdoZW4gdGhlIHJvdXRlciBuYXZpZ2F0aW9uIGhhcyBiZWVuIGZpbmlzaGVkIHN1Y2Nlc3NmdWxseS5cbiAqL1xuZXhwb3J0IGNsYXNzIFJvdXRlck5hdmlnYXRlZDxUID0gUm91dGVyU3RhdGVTbmFwc2hvdD4ge1xuICBzdGF0aWMgcmVhZG9ubHkgdHlwZSA9ICdbUm91dGVyXSBSb3V0ZXJOYXZpZ2F0ZWQnO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyByb3V0ZXJTdGF0ZTogVCxcbiAgICBwdWJsaWMgZXZlbnQ6IE5hdmlnYXRpb25FbmQsXG4gICAgcHVibGljIHRyaWdnZXI6IFJvdXRlclRyaWdnZXIgPSAnbm9uZSdcbiAgKSB7fVxufVxuXG4vKipcbiAqIEFuIHVuaW9uIHR5cGUgb2Ygcm91dGVyIGFjdGlvbnMuXG4gKi9cbmV4cG9ydCB0eXBlIFJvdXRlckFjdGlvbjxULCBWID0gUm91dGVyU3RhdGVTbmFwc2hvdD4gPVxuICB8IFJvdXRlclJlcXVlc3Q8Vj5cbiAgfCBSb3V0ZXJOYXZpZ2F0aW9uPFY+XG4gIHwgUm91dGVyQ2FuY2VsPFQsIFY+XG4gIHwgUm91dGVyRXJyb3I8VCwgVj5cbiAgfCBSb3V0ZXJEYXRhUmVzb2x2ZWQ8Vj5cbiAgfCBSb3V0ZXJOYXZpZ2F0ZWQ8Vj47XG4iXX0=