import { __decorate, __metadata } from "tslib";
import { NgZone, Injectable, Injector } from '@angular/core';
import { NavigationCancel, NavigationError, Router, RoutesRecognized, ResolveEnd, NavigationStart, NavigationEnd } from '@angular/router';
import { Action, createSelector, State, StateToken, Store } from '@ngxs/store';
import { ɵNGXS_ROUTER_PLUGIN_OPTIONS } from '@ngxs/router-plugin/internals';
import { ReplaySubject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { Navigate, RouterCancel, RouterError, RouterNavigation, RouterDataResolved, RouterRequest, RouterNavigated } from './router.actions';
import { RouterStateSerializer } from './serializer';
import * as i0 from "@angular/core";
import * as i1 from "@ngxs/store";
import * as i2 from "@angular/router";
import * as i3 from "./serializer";
// NGXS doesn't permit untyped selectors, such as `select(RouterState)`,
// as the `RouterState` class itself lacks type information. Therefore,
// the following state token must replace `RouterState`.
export const ROUTER_STATE_TOKEN = new StateToken('router');
let RouterState = class RouterState {
    static { this.state = createSelector([ROUTER_STATE_TOKEN], (state) => {
        // The `state` is optional if the selector is invoked before the router
        // state is registered in NGXS.
        return state?.state;
    }); }
    static { this.url = createSelector([ROUTER_STATE_TOKEN], state => state?.state?.url); }
    constructor(_store, _router, _serializer, _ngZone, injector) {
        this._store = _store;
        this._router = _router;
        this._serializer = _serializer;
        this._ngZone = _ngZone;
        /**
         * Determines how navigation was performed by the `RouterState` itself
         * or outside via `new Navigate(...)`
         */
        this._trigger = 'none';
        /**
         * That's the serialized state from the `Router` class
         */
        this._routerState = null;
        /**
         * That's the value of the `RouterState` state
         */
        this._storeState = null;
        this._lastEvent = null;
        this._options = null;
        this._destroy$ = new ReplaySubject(1);
        // Note: do not use `@Inject` since it fails on lower versions of Angular with Jest
        // integration, it cannot resolve the token provider.
        this._options = injector.get(ɵNGXS_ROUTER_PLUGIN_OPTIONS, null);
        this._setUpStoreListener();
        this._setUpRouterEventsListener();
    }
    ngOnDestroy() {
        this._destroy$.next();
    }
    navigate(_, action) {
        return this._ngZone.run(() => this._router.navigate(action.path, {
            queryParams: action.queryParams,
            ...action.extras
        }));
    }
    angularRouterAction(ctx, action) {
        ctx.setState({
            trigger: action.trigger,
            state: action.routerState,
            navigationId: action.event.id
        });
    }
    _setUpStoreListener() {
        const routerState$ = this._store
            .select(ROUTER_STATE_TOKEN)
            .pipe(takeUntil(this._destroy$));
        routerState$.subscribe((state) => {
            this._navigateIfNeeded(state);
        });
    }
    _navigateIfNeeded(routerState) {
        if (routerState && routerState.trigger === 'devtools') {
            this._storeState = this._store.selectSnapshot(ROUTER_STATE_TOKEN);
        }
        const canSkipNavigation = !this._storeState ||
            !this._storeState.state ||
            !routerState ||
            routerState.trigger === 'router' ||
            this._router.url === this._storeState.state.url ||
            this._lastEvent instanceof NavigationStart;
        if (canSkipNavigation) {
            return;
        }
        this._storeState = this._store.selectSnapshot(ROUTER_STATE_TOKEN);
        this._trigger = 'store';
        this._ngZone.run(() => this._router.navigateByUrl(this._storeState.state.url));
    }
    _setUpRouterEventsListener() {
        const dispatchRouterNavigationLate = this._options != null &&
            this._options.navigationActionTiming === 2 /* NavigationActionTiming.PostActivation */;
        let lastRoutesRecognized;
        const events$ = this._router.events.pipe(takeUntil(this._destroy$));
        events$.subscribe(event => {
            this._lastEvent = event;
            if (event instanceof NavigationStart) {
                this._navigationStart(event);
            }
            else if (event instanceof RoutesRecognized) {
                lastRoutesRecognized = event;
                if (!dispatchRouterNavigationLate && this._trigger !== 'store') {
                    this._dispatchRouterNavigation(lastRoutesRecognized);
                }
            }
            else if (event instanceof ResolveEnd) {
                this._dispatchRouterDataResolved(event);
            }
            else if (event instanceof NavigationCancel) {
                this._dispatchRouterCancel(event);
                this._reset();
            }
            else if (event instanceof NavigationError) {
                this._dispatchRouterError(event);
                this._reset();
            }
            else if (event instanceof NavigationEnd) {
                if (this._trigger !== 'store') {
                    if (dispatchRouterNavigationLate) {
                        this._dispatchRouterNavigation(lastRoutesRecognized);
                    }
                    this._dispatchRouterNavigated(event);
                }
                this._reset();
            }
        });
    }
    /** Reacts to `NavigationStart`. */
    _navigationStart(event) {
        this._routerState = this._serializer.serialize(this._router.routerState.snapshot);
        if (this._trigger !== 'none') {
            this._storeState = this._store.selectSnapshot(ROUTER_STATE_TOKEN);
            this._dispatchRouterAction(new RouterRequest(this._routerState, event, this._trigger));
        }
    }
    /** Reacts to `ResolveEnd`. */
    _dispatchRouterDataResolved(event) {
        const routerState = this._serializer.serialize(event.state);
        this._dispatchRouterAction(new RouterDataResolved(routerState, event, this._trigger));
    }
    /** Reacts to `RoutesRecognized` or `NavigationEnd`, depends on the `navigationActionTiming`. */
    _dispatchRouterNavigation(lastRoutesRecognized) {
        const nextRouterState = this._serializer.serialize(lastRoutesRecognized.state);
        this._dispatchRouterAction(new RouterNavigation(nextRouterState, new RoutesRecognized(lastRoutesRecognized.id, lastRoutesRecognized.url, lastRoutesRecognized.urlAfterRedirects, nextRouterState), this._trigger));
    }
    /** Reacts to `NavigationCancel`. */
    _dispatchRouterCancel(event) {
        this._dispatchRouterAction(new RouterCancel(this._routerState, this._storeState, event, this._trigger));
    }
    /** Reacts to `NavigationEnd`. */
    _dispatchRouterError(event) {
        this._dispatchRouterAction(new RouterError(this._routerState, this._storeState, new NavigationError(event.id, event.url, `${event}`), this._trigger));
    }
    /** Reacts to `NavigationEnd`. */
    _dispatchRouterNavigated(event) {
        const routerState = this._serializer.serialize(this._router.routerState.snapshot);
        this._dispatchRouterAction(new RouterNavigated(routerState, event, this._trigger));
    }
    _dispatchRouterAction(action) {
        this._trigger = 'router';
        try {
            this._store.dispatch(action);
        }
        finally {
            this._trigger = 'none';
        }
    }
    _reset() {
        this._trigger = 'none';
        this._storeState = null;
        this._routerState = null;
    }
    /** @nocollapse */ static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: RouterState, deps: [{ token: i1.Store }, { token: i2.Router }, { token: i3.RouterStateSerializer }, { token: i0.NgZone }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable }); }
    /** @nocollapse */ static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: RouterState }); }
};
__decorate([
    Action(Navigate),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Navigate]),
    __metadata("design:returntype", void 0)
], RouterState.prototype, "navigate", null);
__decorate([
    Action([
        (RouterRequest),
        (RouterNavigation),
        (RouterError),
        (RouterCancel),
        (RouterDataResolved),
        (RouterNavigated)
    ]),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", void 0)
], RouterState.prototype, "angularRouterAction", null);
RouterState = __decorate([
    State({
        name: ROUTER_STATE_TOKEN,
        defaults: {
            state: undefined,
            navigationId: undefined,
            trigger: 'none'
        }
    }),
    __metadata("design:paramtypes", [Store,
        Router,
        RouterStateSerializer,
        NgZone,
        Injector])
], RouterState);
export { RouterState };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: RouterState, decorators: [{
            type: Injectable
        }], ctorParameters: () => [{ type: i1.Store }, { type: i2.Router }, { type: i3.RouterStateSerializer }, { type: i0.NgZone }, { type: i0.Injector }], propDecorators: { navigate: [], angularRouterAction: [] } });
//# sourceMappingURL=data:application/json;base64,