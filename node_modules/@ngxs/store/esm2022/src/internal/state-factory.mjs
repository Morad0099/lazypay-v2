import { Injectable, Injector, inject, ɵisPromise } from '@angular/core';
import { ɵmemoize, ɵMETA_KEY, ɵgetStoreMetadata, ɵINITIAL_STATE_TOKEN } from '@ngxs/store/internals';
import { getActionTypeFromInstance, getValue, setValue } from '@ngxs/store/plugins';
import { forkJoin, from, isObservable, of, throwError, catchError, defaultIfEmpty, filter, map, mergeMap, takeUntil, finalize } from 'rxjs';
import { NgxsConfig } from '../symbols';
import { buildGraph, findFullParentPath, nameToState, ɵPROP_GETTER, topologicalSort } from './internals';
import { NgxsActionRegistry } from '../actions/action-registry';
import { InternalActions } from '../actions-stream';
import { InternalDispatchedActionResults } from '../internal/dispatcher';
import { ensureStateNameIsUnique, ensureStatesAreDecorated } from '../utils/store-validators';
import { ensureStateClassIsInjectable } from '../ivy/ivy-enabled-in-dev-mode';
import { NgxsUnhandledActionsLogger } from '../dev-features/ngxs-unhandled-actions-logger';
import { NgxsUnhandledErrorHandler } from '../ngxs-unhandled-error-handler';
import { assignUnhandledCallback } from './unhandled-rxjs-error-callback';
import { StateContextFactory } from './state-context-factory';
import { ofActionDispatched } from '../operators/of-action';
import * as i0 from "@angular/core";
const NG_DEV_MODE = typeof ngDevMode !== 'undefined' && ngDevMode;
function cloneDefaults(defaults) {
    let value = defaults === undefined ? {} : defaults;
    if (defaults) {
        if (Array.isArray(defaults)) {
            value = defaults.slice();
        }
        else if (typeof defaults === 'object') {
            value = { ...defaults };
        }
    }
    return value;
}
/**
 * The `StateFactory` class adds root and feature states to the graph.
 * This extracts state names from state classes, checks if they already
 * exist in the global graph, throws errors if their names are invalid, etc.
 * See its constructor, state factories inject state factories that are
 * parent-level providers. This is required to get feature states from the
 * injector on the same level.
 *
 * The `NgxsModule.forFeature(...)` returns `providers: [StateFactory, ...states]`.
 * The `StateFactory` is initialized on the feature level and goes through `...states`
 * to get them from the injector through `injector.get(state)`.
 * @ignore
 */
export class StateFactory {
    constructor() {
        this._injector = inject(Injector);
        this._config = inject(NgxsConfig);
        this._parentFactory = inject(StateFactory, { optional: true, skipSelf: true });
        this._stateContextFactory = inject(StateContextFactory);
        this._actions = inject(InternalActions);
        this._actionResults = inject(InternalDispatchedActionResults);
        this._initialState = inject(ɵINITIAL_STATE_TOKEN, { optional: true });
        this._actionRegistry = inject(NgxsActionRegistry);
        this._propGetter = inject(ɵPROP_GETTER);
        this._actionsSubscription = null;
        this._ngxsUnhandledErrorHandler = null;
        this._states = [];
        this._statesByName = {};
        this._statePaths = {};
        this.getRuntimeSelectorContext = ɵmemoize(() => {
            // eslint-disable-next-line @typescript-eslint/no-this-alias
            const stateFactory = this;
            const propGetter = stateFactory._propGetter;
            function resolveGetter(key) {
                const path = stateFactory.statePaths[key];
                return path ? propGetter(path.split('.')) : null;
            }
            const context = this._parentFactory
                ? this._parentFactory.getRuntimeSelectorContext()
                : {
                    getStateGetter(key) {
                        // Use `@__INLINE__` annotation to forcely inline `resolveGetter`.
                        // This is a Terser annotation, which will function only in the production mode.
                        let getter = /*@__INLINE__*/ resolveGetter(key);
                        if (getter) {
                            return getter;
                        }
                        return (...args) => {
                            // Late loaded getter
                            if (!getter) {
                                getter = /*@__INLINE__*/ resolveGetter(key);
                            }
                            return getter ? getter(...args) : undefined;
                        };
                    },
                    getSelectorOptions(localOptions) {
                        const globalSelectorOptions = stateFactory._config.selectorOptions;
                        return {
                            ...globalSelectorOptions,
                            ...(localOptions || {})
                        };
                    }
                };
            return context;
        });
    }
    get states() {
        return this._parentFactory ? this._parentFactory.states : this._states;
    }
    get statesByName() {
        return this._parentFactory ? this._parentFactory.statesByName : this._statesByName;
    }
    get statePaths() {
        return this._parentFactory ? this._parentFactory.statePaths : this._statePaths;
    }
    ngOnDestroy() {
        this._actionsSubscription?.unsubscribe();
    }
    /**
     * Add a new state to the global defs.
     */
    add(stateClasses) {
        if (NG_DEV_MODE) {
            ensureStatesAreDecorated(stateClasses);
        }
        const { newStates } = this.addToStatesMap(stateClasses);
        if (!newStates.length)
            return [];
        const stateGraph = buildGraph(newStates);
        const sortedStates = topologicalSort(stateGraph);
        const paths = findFullParentPath(stateGraph);
        const nameGraph = nameToState(newStates);
        const bootstrappedStores = [];
        for (const name of sortedStates) {
            const stateClass = nameGraph[name];
            const path = paths[name];
            const meta = stateClass[ɵMETA_KEY];
            this.addRuntimeInfoToMeta(meta, path);
            // Note: previously we called `ensureStateClassIsInjectable` within the
            // `State` decorator. This check is moved here because the `ɵprov` property
            // will not exist on the class in JIT mode (because it's set asynchronously
            // during JIT compilation through `Object.defineProperty`).
            if (NG_DEV_MODE) {
                ensureStateClassIsInjectable(stateClass);
            }
            const stateMap = {
                name,
                path,
                isInitialised: false,
                actions: meta.actions,
                instance: this._injector.get(stateClass),
                defaults: cloneDefaults(meta.defaults)
            };
            // ensure our store hasn't already been added
            // but don't throw since it could be lazy
            // loaded from different paths
            if (!this.hasBeenMountedAndBootstrapped(name, path)) {
                bootstrappedStores.push(stateMap);
            }
            this.states.push(stateMap);
            this.hydrateActionMetasMap(stateMap);
        }
        return bootstrappedStores;
    }
    /**
     * Add a set of states to the store and return the defaults
     */
    addAndReturnDefaults(stateClasses) {
        const classes = stateClasses || [];
        const mappedStores = this.add(classes);
        const defaults = mappedStores.reduce((result, mappedStore) => setValue(result, mappedStore.path, mappedStore.defaults), {});
        return { defaults, states: mappedStores };
    }
    connectActionHandlers() {
        // Note: We have to connect actions only once when the `StateFactory`
        //       is being created for the first time. This checks if we're in
        //       a child state factory and the parent state factory already exists.
        if (this._parentFactory || this._actionsSubscription !== null) {
            return;
        }
        this._actionsSubscription = this._actions
            .pipe(filter((ctx) => ctx.status === "DISPATCHED" /* ActionStatus.Dispatched */), mergeMap(ctx => {
            const action = ctx.action;
            return this.invokeActions(action).pipe(map(() => ({ action, status: "SUCCESSFUL" /* ActionStatus.Successful */ })), defaultIfEmpty({ action, status: "CANCELED" /* ActionStatus.Canceled */ }), catchError(error => {
                const ngxsUnhandledErrorHandler = (this._ngxsUnhandledErrorHandler ||=
                    this._injector.get(NgxsUnhandledErrorHandler));
                const handleableError = assignUnhandledCallback(error, () => ngxsUnhandledErrorHandler.handleError(error, { action }));
                return of({
                    action,
                    status: "ERRORED" /* ActionStatus.Errored */,
                    error: handleableError
                });
            }));
        }))
            .subscribe(ctx => this._actionResults.next(ctx));
    }
    /**
     * Invoke actions on the states.
     */
    invokeActions(action) {
        const type = getActionTypeFromInstance(action);
        const results = [];
        // Determines whether the dispatched action has been handled, this is assigned
        // to `true` within the below `for` loop if any `actionMetas` has been found.
        let actionHasBeenHandled = false;
        const actionHandlers = this._actionRegistry.get(type);
        if (actionHandlers) {
            for (const actionHandler of actionHandlers) {
                let result;
                try {
                    result = actionHandler(action);
                }
                catch (e) {
                    result = throwError(() => e);
                }
                results.push(result);
                actionHasBeenHandled = true;
            }
        }
        // The `NgxsUnhandledActionsLogger` is a tree-shakable class which functions
        // only during development.
        if (NG_DEV_MODE && !actionHasBeenHandled) {
            const unhandledActionsLogger = this._injector.get(NgxsUnhandledActionsLogger, null);
            // The `NgxsUnhandledActionsLogger` will not be resolved by the injector if the
            // `NgxsDevelopmentModule` is not provided. It's enough to check whether the `injector.get`
            // didn't return `null` so we may ensure the module has been imported.
            unhandledActionsLogger?.warn(action);
        }
        if (!results.length) {
            results.push(of(undefined));
        }
        return forkJoin(results);
    }
    addToStatesMap(stateClasses) {
        const newStates = [];
        const statesMap = this.statesByName;
        for (const stateClass of stateClasses) {
            const stateName = ɵgetStoreMetadata(stateClass).name;
            if (NG_DEV_MODE) {
                ensureStateNameIsUnique(stateName, stateClass, statesMap);
            }
            const unmountedState = !statesMap[stateName];
            if (unmountedState) {
                newStates.push(stateClass);
                statesMap[stateName] = stateClass;
            }
        }
        return { newStates };
    }
    addRuntimeInfoToMeta(meta, path) {
        this.statePaths[meta.name] = path;
        // TODO: versions after v3 - we plan to get rid of the `path` property because it is non-deterministic
        // we can do this when we get rid of the incorrectly exposed getStoreMetadata
        // We will need to come up with an alternative to what was exposed in v3 because this is used by many plugins
        meta.path = path;
    }
    hasBeenMountedAndBootstrapped(name, path) {
        const valueIsBootstrappedInInitialState = getValue(this._initialState, path) !== undefined;
        // This checks whether a state has been already added to the global graph and
        // its lifecycle is in 'bootstrapped' state.
        return this.statesByName[name] && valueIsBootstrappedInInitialState;
    }
    hydrateActionMetasMap({ path, actions, instance }) {
        const { dispatched$ } = this._actions;
        for (const actionType of Object.keys(actions)) {
            const actionHandlers = actions[actionType].map(actionMeta => {
                const cancelable = !!actionMeta.options.cancelUncompleted;
                return (action) => {
                    const stateContext = this._stateContextFactory.createStateContext(path);
                    let result = instance[actionMeta.fn](stateContext, action);
                    // We need to use `isPromise` instead of checking whether
                    // `result instanceof Promise`. In zone.js patched environments, `global.Promise`
                    // is the `ZoneAwarePromise`. Some APIs, which are likely not patched by zone.js
                    // for certain reasons, might not work with `instanceof`. For instance, the dynamic
                    // import returns a native promise (not a `ZoneAwarePromise`), causing this check to
                    // be falsy.
                    if (ɵisPromise(result)) {
                        result = from(result);
                    }
                    if (isObservable(result)) {
                        result = result.pipe(mergeMap((value) => {
                            if (ɵisPromise(value)) {
                                return from(value);
                            }
                            else if (isObservable(value)) {
                                return value;
                            }
                            else {
                                return of(value);
                            }
                        }), 
                        // If this observable has completed without emitting any values,
                        // we wouldn't want to complete the entire chain of actions.
                        // If any observable completes, then the action will be canceled.
                        // For instance, if any action handler had a statement like
                        // `handler(ctx) { return EMPTY; }`, then the action would be canceled.
                        // See https://github.com/ngxs/store/issues/1568
                        // Note that we actually don't care about the return type; we only care
                        // about emission, and thus `undefined` is applicable by the framework.
                        defaultIfEmpty(undefined));
                        if (cancelable) {
                            const notifier$ = dispatched$.pipe(ofActionDispatched(action));
                            result = result.pipe(takeUntil(notifier$));
                        }
                        result = result.pipe(
                        // Note that we use the `finalize` operator only when the action handler
                        // returns an observable. If the action handler is synchronous, we do not
                        // need to set the state context functions to `noop`, as the absence of a
                        // return value indicates no asynchronous functionality. If the handler's
                        // result is unsubscribed (either because the observable has completed or it
                        // was unsubscribed by `takeUntil` due to a new action being dispatched),
                        // we prevent writing to the state context.
                        finalize(() => {
                            stateContext.setState = noop;
                            stateContext.patchState = noop;
                        }));
                    }
                    else {
                        // If the action handler is synchronous and returns nothing (`void`), we
                        // still have to convert the result to a synchronous observable.
                        result = of(undefined);
                    }
                    return result;
                };
            });
            for (const actionHandler of actionHandlers) {
                this._actionRegistry.register(actionType, actionHandler);
            }
        }
    }
    /** @nocollapse */ static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: StateFactory, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    /** @nocollapse */ static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: StateFactory }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: StateFactory, decorators: [{
            type: Injectable
        }] });
// This is used to replace `setState` and `patchState` once the action
// handler has been unsubscribed or completed, to prevent writing
// to the state context.
function noop() { }
//# sourceMappingURL=data:application/json;base64,