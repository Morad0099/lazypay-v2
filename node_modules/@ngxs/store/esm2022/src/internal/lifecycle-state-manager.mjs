import { Injectable } from '@angular/core';
import { ɵNgxsAppBootstrappedState } from '@ngxs/store/internals';
import { getValue, InitState, UpdateState } from '@ngxs/store/plugins';
import { ReplaySubject } from 'rxjs';
import { filter, mergeMap, pairwise, startWith, takeUntil, tap } from 'rxjs/operators';
import { Store } from '../store';
import { StateContextFactory } from './state-context-factory';
import { InternalStateOperations } from './state-operations';
import { NgxsSimpleChange } from '../symbols';
import { getInvalidInitializationOrderMessage } from '../configs/messages.config';
import * as i0 from "@angular/core";
import * as i1 from "../store";
import * as i2 from "./state-operations";
import * as i3 from "./state-context-factory";
import * as i4 from "@ngxs/store/internals";
const NG_DEV_MODE = typeof ngDevMode !== 'undefined' && ngDevMode;
export class LifecycleStateManager {
    constructor(_store, _internalStateOperations, _stateContextFactory, _appBootstrappedState) {
        this._store = _store;
        this._internalStateOperations = _internalStateOperations;
        this._stateContextFactory = _stateContextFactory;
        this._appBootstrappedState = _appBootstrappedState;
        this._destroy$ = new ReplaySubject(1);
    }
    ngOnDestroy() {
        this._destroy$.next();
    }
    ngxsBootstrap(action, results) {
        if (NG_DEV_MODE) {
            if (action instanceof InitState) {
                this._initStateHasBeenDispatched = true;
            }
            else if (
            // This is a dev mode-only check that ensures the correct order of
            // state initialization. The `NgxsModule.forRoot` or `provideStore` should
            // always come first, followed by `forFeature` and `provideStates`. If the
            // `UpdateState` is dispatched before the `InitState` is dispatched, it indicates
            // that modules or providers are in an invalid order.
            action instanceof UpdateState &&
                !this._initStateHasBeenDispatched) {
                console.error(getInvalidInitializationOrderMessage(action.addedStates));
            }
        }
        this._internalStateOperations
            .getRootStateOperations()
            .dispatch(action)
            .pipe(filter(() => !!results), tap(() => this._invokeInitOnStates(results.states)), mergeMap(() => this._appBootstrappedState), filter(appBootstrapped => !!appBootstrapped), takeUntil(this._destroy$))
            .subscribe(() => this._invokeBootstrapOnStates(results.states));
    }
    _invokeInitOnStates(mappedStores) {
        for (const mappedStore of mappedStores) {
            const instance = mappedStore.instance;
            if (instance.ngxsOnChanges) {
                this._store
                    .select(state => getValue(state, mappedStore.path))
                    .pipe(startWith(undefined), pairwise(), takeUntil(this._destroy$))
                    .subscribe(([previousValue, currentValue]) => {
                    const change = new NgxsSimpleChange(previousValue, currentValue, !mappedStore.isInitialised);
                    instance.ngxsOnChanges(change);
                });
            }
            if (instance.ngxsOnInit) {
                instance.ngxsOnInit(this._getStateContext(mappedStore));
            }
            mappedStore.isInitialised = true;
        }
    }
    _invokeBootstrapOnStates(mappedStores) {
        for (const mappedStore of mappedStores) {
            const instance = mappedStore.instance;
            if (instance.ngxsAfterBootstrap) {
                instance.ngxsAfterBootstrap(this._getStateContext(mappedStore));
            }
        }
    }
    _getStateContext(mappedStore) {
        return this._stateContextFactory.createStateContext(mappedStore.path);
    }
    /** @nocollapse */ static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: LifecycleStateManager, deps: [{ token: i1.Store }, { token: i2.InternalStateOperations }, { token: i3.StateContextFactory }, { token: i4.ɵNgxsAppBootstrappedState }], target: i0.ɵɵFactoryTarget.Injectable }); }
    /** @nocollapse */ static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: LifecycleStateManager, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: LifecycleStateManager, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.Store }, { type: i2.InternalStateOperations }, { type: i3.StateContextFactory }, { type: i4.ɵNgxsAppBootstrappedState }] });
//# sourceMappingURL=data:application/json;base64,