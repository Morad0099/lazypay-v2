import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class NgxsActionRegistry {
    constructor() {
        // Instead of going over the states list every time an action is dispatched,
        // we are constructing a map of action types to lists of action metadata.
        // If the `@@Init` action is handled in two different states, the action
        // metadata list will contain two objects that have the state `instance` and
        // method names to be used as action handlers (decorated with `@Action(InitState)`).
        this._actionTypeToHandlersMap = new Map();
    }
    ngOnDestroy() {
        this._actionTypeToHandlersMap.clear();
    }
    get(type) {
        return this._actionTypeToHandlersMap.get(type);
    }
    register(type, handler) {
        const handlers = this._actionTypeToHandlersMap.get(type) ?? new Set();
        handlers.add(handler);
        this._actionTypeToHandlersMap.set(type, handlers);
        return () => {
            const handlers = this._actionTypeToHandlersMap.get(type);
            handlers.delete(handler);
        };
    }
    /** @nocollapse */ static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: NgxsActionRegistry, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    /** @nocollapse */ static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: NgxsActionRegistry, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: NgxsActionRegistry, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9uLXJlZ2lzdHJ5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvc3RvcmUvc3JjL2FjdGlvbnMvYWN0aW9uLXJlZ2lzdHJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQWtCLE1BQU0sZUFBZSxDQUFDOztBQU0zRCxNQUFNLE9BQU8sa0JBQWtCO0lBRC9CO1FBRUUsNEVBQTRFO1FBQzVFLHlFQUF5RTtRQUN6RSx3RUFBd0U7UUFDeEUsNEVBQTRFO1FBQzVFLG9GQUFvRjtRQUNuRSw2QkFBd0IsR0FBRyxJQUFJLEdBQUcsRUFBZ0MsQ0FBQztLQW9CckY7SUFsQkMsV0FBVztRQUNULElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUN4QyxDQUFDO0lBRUQsR0FBRyxDQUFDLElBQVk7UUFDZCxPQUFPLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVELFFBQVEsQ0FBQyxJQUFZLEVBQUUsT0FBd0I7UUFDN0MsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLHdCQUF3QixDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLEdBQUcsRUFBRSxDQUFDO1FBQ3RFLFFBQVEsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDdEIsSUFBSSxDQUFDLHdCQUF3QixDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFFbEQsT0FBTyxHQUFHLEVBQUU7WUFDVixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsd0JBQXdCLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBRSxDQUFDO1lBQzFELFFBQVEsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDM0IsQ0FBQyxDQUFDO0lBQ0osQ0FBQztpSUF6QlUsa0JBQWtCO3FJQUFsQixrQkFBa0IsY0FETCxNQUFNOzsyRkFDbkIsa0JBQWtCO2tCQUQ5QixVQUFVO21CQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIHR5cGUgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgdHlwZSB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuZXhwb3J0IHR5cGUgQWN0aW9uSGFuZGxlckZuID0gKGFjdGlvbjogYW55KSA9PiBPYnNlcnZhYmxlPHVua25vd24+O1xuXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxuZXhwb3J0IGNsYXNzIE5neHNBY3Rpb25SZWdpc3RyeSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gIC8vIEluc3RlYWQgb2YgZ29pbmcgb3ZlciB0aGUgc3RhdGVzIGxpc3QgZXZlcnkgdGltZSBhbiBhY3Rpb24gaXMgZGlzcGF0Y2hlZCxcbiAgLy8gd2UgYXJlIGNvbnN0cnVjdGluZyBhIG1hcCBvZiBhY3Rpb24gdHlwZXMgdG8gbGlzdHMgb2YgYWN0aW9uIG1ldGFkYXRhLlxuICAvLyBJZiB0aGUgYEBASW5pdGAgYWN0aW9uIGlzIGhhbmRsZWQgaW4gdHdvIGRpZmZlcmVudCBzdGF0ZXMsIHRoZSBhY3Rpb25cbiAgLy8gbWV0YWRhdGEgbGlzdCB3aWxsIGNvbnRhaW4gdHdvIG9iamVjdHMgdGhhdCBoYXZlIHRoZSBzdGF0ZSBgaW5zdGFuY2VgIGFuZFxuICAvLyBtZXRob2QgbmFtZXMgdG8gYmUgdXNlZCBhcyBhY3Rpb24gaGFuZGxlcnMgKGRlY29yYXRlZCB3aXRoIGBAQWN0aW9uKEluaXRTdGF0ZSlgKS5cbiAgcHJpdmF0ZSByZWFkb25seSBfYWN0aW9uVHlwZVRvSGFuZGxlcnNNYXAgPSBuZXcgTWFwPHN0cmluZywgU2V0PEFjdGlvbkhhbmRsZXJGbj4+KCk7XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5fYWN0aW9uVHlwZVRvSGFuZGxlcnNNYXAuY2xlYXIoKTtcbiAgfVxuXG4gIGdldCh0eXBlOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5fYWN0aW9uVHlwZVRvSGFuZGxlcnNNYXAuZ2V0KHR5cGUpO1xuICB9XG5cbiAgcmVnaXN0ZXIodHlwZTogc3RyaW5nLCBoYW5kbGVyOiBBY3Rpb25IYW5kbGVyRm4pIHtcbiAgICBjb25zdCBoYW5kbGVycyA9IHRoaXMuX2FjdGlvblR5cGVUb0hhbmRsZXJzTWFwLmdldCh0eXBlKSA/PyBuZXcgU2V0KCk7XG4gICAgaGFuZGxlcnMuYWRkKGhhbmRsZXIpO1xuICAgIHRoaXMuX2FjdGlvblR5cGVUb0hhbmRsZXJzTWFwLnNldCh0eXBlLCBoYW5kbGVycyk7XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgY29uc3QgaGFuZGxlcnMgPSB0aGlzLl9hY3Rpb25UeXBlVG9IYW5kbGVyc01hcC5nZXQodHlwZSkhO1xuICAgICAgaGFuZGxlcnMuZGVsZXRlKGhhbmRsZXIpO1xuICAgIH07XG4gIH1cbn1cbiJdfQ==