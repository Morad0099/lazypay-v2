import { ɵgetSelectorMetadata, ɵgetStoreMetadata } from '@ngxs/store/internals';
import { NgZone } from '@angular/core';
function getMissingMetaDataError(selector, context = {}) {
    const metadata = ɵgetSelectorMetadata(selector) || ɵgetStoreMetadata(selector);
    if (!metadata) {
        return new Error(`${context.prefix}The value provided as the ${context.noun} is not a valid selector.`);
    }
    return null;
}
export function ensureValidSelector(selector, context = {}) {
    const noun = context.noun || 'selector';
    const prefix = context.prefix ? context.prefix + ': ' : '';
    ensureValueProvided(selector, { noun, prefix: context.prefix });
    const error = getMissingMetaDataError(selector, { noun, prefix });
    if (error) {
        // If we have used this utility within a state class, we may be
        //  before the @State or @Selector decorators have been applied.
        //  wait until the next microtask to verify.
        // Theoretically this situation is only encountered when the javascript
        //  files are being loaded and we are outside the angular zone.
        if (!NgZone.isInAngularZone()) {
            Promise.resolve().then(() => {
                const errorAgain = getMissingMetaDataError(selector, { noun, prefix });
                if (errorAgain) {
                    // Throw the originally captured error so that the stack trace shows the
                    // original utility call site.
                    console.error(error);
                }
            });
        }
        else {
            throw error;
        }
    }
}
export function ensureValueProvided(value, context = {}) {
    const noun = context.noun || 'value';
    const prefix = context.prefix ? context.prefix + ': ' : '';
    if (!value) {
        throw new Error(`${prefix}A ${noun} must be provided.`);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0b3ItY2hlY2tzLnV0aWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9zdG9yZS9zcmMvc2VsZWN0b3JzL3NlbGVjdG9yLWNoZWNrcy51dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRWhGLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdkMsU0FBUyx1QkFBdUIsQ0FDOUIsUUFBMkIsRUFDM0IsVUFBOEMsRUFBRTtJQUVoRCxNQUFNLFFBQVEsR0FBRyxvQkFBb0IsQ0FBQyxRQUFRLENBQUMsSUFBSSxpQkFBaUIsQ0FBQyxRQUFlLENBQUMsQ0FBQztJQUN0RixJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDZCxPQUFPLElBQUksS0FBSyxDQUNkLEdBQUcsT0FBTyxDQUFDLE1BQU0sNkJBQTZCLE9BQU8sQ0FBQyxJQUFJLDJCQUEyQixDQUN0RixDQUFDO0lBQ0osQ0FBQztJQUNELE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQztBQUVELE1BQU0sVUFBVSxtQkFBbUIsQ0FDakMsUUFBMkIsRUFDM0IsVUFBOEMsRUFBRTtJQUVoRCxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxJQUFJLFVBQVUsQ0FBQztJQUN4QyxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQzNELG1CQUFtQixDQUFDLFFBQVEsRUFBRSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDaEUsTUFBTSxLQUFLLEdBQUcsdUJBQXVCLENBQUMsUUFBUSxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDbEUsSUFBSSxLQUFLLEVBQUUsQ0FBQztRQUNWLCtEQUErRDtRQUMvRCxnRUFBZ0U7UUFDaEUsNENBQTRDO1FBQzVDLHVFQUF1RTtRQUN2RSwrREFBK0Q7UUFDL0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxlQUFlLEVBQUUsRUFBRSxDQUFDO1lBQzlCLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFO2dCQUMxQixNQUFNLFVBQVUsR0FBRyx1QkFBdUIsQ0FBQyxRQUFRLEVBQUUsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztnQkFDdkUsSUFBSSxVQUFVLEVBQUUsQ0FBQztvQkFDZix3RUFBd0U7b0JBQ3hFLDhCQUE4QjtvQkFDOUIsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDdkIsQ0FBQztZQUNILENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQzthQUFNLENBQUM7WUFDTixNQUFNLEtBQUssQ0FBQztRQUNkLENBQUM7SUFDSCxDQUFDO0FBQ0gsQ0FBQztBQUVELE1BQU0sVUFBVSxtQkFBbUIsQ0FDakMsS0FBVSxFQUNWLFVBQThDLEVBQUU7SUFFaEQsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksSUFBSSxPQUFPLENBQUM7SUFDckMsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUMzRCxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDWCxNQUFNLElBQUksS0FBSyxDQUFDLEdBQUcsTUFBTSxLQUFLLElBQUksb0JBQW9CLENBQUMsQ0FBQztJQUMxRCxDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IMm1Z2V0U2VsZWN0b3JNZXRhZGF0YSwgybVnZXRTdG9yZU1ldGFkYXRhIH0gZnJvbSAnQG5neHMvc3RvcmUvaW50ZXJuYWxzJztcbmltcG9ydCB7IMm1U2VsZWN0b3JEZWYgfSBmcm9tICcuL3NlbGVjdG9yLXR5cGVzLnV0aWwnO1xuaW1wb3J0IHsgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmZ1bmN0aW9uIGdldE1pc3NpbmdNZXRhRGF0YUVycm9yKFxuICBzZWxlY3RvcjogybVTZWxlY3RvckRlZjxhbnk+LFxuICBjb250ZXh0OiB7IHByZWZpeD86IHN0cmluZzsgbm91bj86IHN0cmluZyB9ID0ge31cbikge1xuICBjb25zdCBtZXRhZGF0YSA9IMm1Z2V0U2VsZWN0b3JNZXRhZGF0YShzZWxlY3RvcikgfHwgybVnZXRTdG9yZU1ldGFkYXRhKHNlbGVjdG9yIGFzIGFueSk7XG4gIGlmICghbWV0YWRhdGEpIHtcbiAgICByZXR1cm4gbmV3IEVycm9yKFxuICAgICAgYCR7Y29udGV4dC5wcmVmaXh9VGhlIHZhbHVlIHByb3ZpZGVkIGFzIHRoZSAke2NvbnRleHQubm91bn0gaXMgbm90IGEgdmFsaWQgc2VsZWN0b3IuYFxuICAgICk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlbnN1cmVWYWxpZFNlbGVjdG9yKFxuICBzZWxlY3RvcjogybVTZWxlY3RvckRlZjxhbnk+LFxuICBjb250ZXh0OiB7IHByZWZpeD86IHN0cmluZzsgbm91bj86IHN0cmluZyB9ID0ge31cbikge1xuICBjb25zdCBub3VuID0gY29udGV4dC5ub3VuIHx8ICdzZWxlY3Rvcic7XG4gIGNvbnN0IHByZWZpeCA9IGNvbnRleHQucHJlZml4ID8gY29udGV4dC5wcmVmaXggKyAnOiAnIDogJyc7XG4gIGVuc3VyZVZhbHVlUHJvdmlkZWQoc2VsZWN0b3IsIHsgbm91biwgcHJlZml4OiBjb250ZXh0LnByZWZpeCB9KTtcbiAgY29uc3QgZXJyb3IgPSBnZXRNaXNzaW5nTWV0YURhdGFFcnJvcihzZWxlY3RvciwgeyBub3VuLCBwcmVmaXggfSk7XG4gIGlmIChlcnJvcikge1xuICAgIC8vIElmIHdlIGhhdmUgdXNlZCB0aGlzIHV0aWxpdHkgd2l0aGluIGEgc3RhdGUgY2xhc3MsIHdlIG1heSBiZVxuICAgIC8vICBiZWZvcmUgdGhlIEBTdGF0ZSBvciBAU2VsZWN0b3IgZGVjb3JhdG9ycyBoYXZlIGJlZW4gYXBwbGllZC5cbiAgICAvLyAgd2FpdCB1bnRpbCB0aGUgbmV4dCBtaWNyb3Rhc2sgdG8gdmVyaWZ5LlxuICAgIC8vIFRoZW9yZXRpY2FsbHkgdGhpcyBzaXR1YXRpb24gaXMgb25seSBlbmNvdW50ZXJlZCB3aGVuIHRoZSBqYXZhc2NyaXB0XG4gICAgLy8gIGZpbGVzIGFyZSBiZWluZyBsb2FkZWQgYW5kIHdlIGFyZSBvdXRzaWRlIHRoZSBhbmd1bGFyIHpvbmUuXG4gICAgaWYgKCFOZ1pvbmUuaXNJbkFuZ3VsYXJab25lKCkpIHtcbiAgICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4ge1xuICAgICAgICBjb25zdCBlcnJvckFnYWluID0gZ2V0TWlzc2luZ01ldGFEYXRhRXJyb3Ioc2VsZWN0b3IsIHsgbm91biwgcHJlZml4IH0pO1xuICAgICAgICBpZiAoZXJyb3JBZ2Fpbikge1xuICAgICAgICAgIC8vIFRocm93IHRoZSBvcmlnaW5hbGx5IGNhcHR1cmVkIGVycm9yIHNvIHRoYXQgdGhlIHN0YWNrIHRyYWNlIHNob3dzIHRoZVxuICAgICAgICAgIC8vIG9yaWdpbmFsIHV0aWxpdHkgY2FsbCBzaXRlLlxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlbnN1cmVWYWx1ZVByb3ZpZGVkKFxuICB2YWx1ZTogYW55LFxuICBjb250ZXh0OiB7IHByZWZpeD86IHN0cmluZzsgbm91bj86IHN0cmluZyB9ID0ge31cbikge1xuICBjb25zdCBub3VuID0gY29udGV4dC5ub3VuIHx8ICd2YWx1ZSc7XG4gIGNvbnN0IHByZWZpeCA9IGNvbnRleHQucHJlZml4ID8gY29udGV4dC5wcmVmaXggKyAnOiAnIDogJyc7XG4gIGlmICghdmFsdWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYCR7cHJlZml4fUEgJHtub3VufSBtdXN0IGJlIHByb3ZpZGVkLmApO1xuICB9XG59XG4iXX0=