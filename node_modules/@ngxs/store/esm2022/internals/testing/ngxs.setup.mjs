import { ApplicationRef } from '@angular/core';
import { TestBed } from '@angular/core/testing';
import { DOCUMENT } from '@angular/common';
import { ÉµBrowserDomAdapter as BrowserDomAdapter } from '@angular/platform-browser';
import { BrowserDynamicTestingModule, platformBrowserDynamicTesting } from '@angular/platform-browser-dynamic/testing';
import { NgxsModule, Store } from '@ngxs/store';
import { NgxsTestModule } from './helpers/ngxs-test.module';
import { skipConsoleLogging } from './skip-console-logging';
export class NgxsTestBed {
    static configureTestingStates(options) {
        this.resetTestBed();
        if (options.before) {
            options.before();
        }
        skipConsoleLogging(() => TestBed.configureTestingModule({
            imports: [
                NgxsTestModule,
                NgxsModule.forRoot(options.states || [], options.ngxsOptions || {}),
                ...(options.imports || [])
            ]
        }).compileComponents());
        NgxsTestBed.ngxsBootstrap();
        return {
            get store() {
                return TestBed.inject(Store);
            },
            get getTestBed() {
                return TestBed;
            }
        };
    }
    static ngxsBootstrap() {
        NgxsTestBed.createRootNode();
        NgxsTestModule.ngDoBootstrap(TestBed.inject(ApplicationRef));
    }
    static resetTestBed() {
        TestBed.resetTestEnvironment();
        TestBed.initTestEnvironment(BrowserDynamicTestingModule, platformBrowserDynamicTesting(), {
            teardown: { destroyAfterEach: true }
        });
    }
    static createRootNode(selector = 'app-root') {
        const document = TestBed.inject(DOCUMENT);
        const adapter = new BrowserDomAdapter();
        const root = adapter.createElement(selector);
        document.body.appendChild(root);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4cy5zZXR1cC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL3N0b3JlL2ludGVybmFscy90ZXN0aW5nL3NyYy9uZ3hzLnNldHVwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDL0MsT0FBTyxFQUFFLE9BQU8sRUFBaUIsTUFBTSx1QkFBdUIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDM0MsT0FBTyxFQUFFLGtCQUFrQixJQUFJLGlCQUFpQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDcEYsT0FBTyxFQUNMLDJCQUEyQixFQUMzQiw2QkFBNkIsRUFDOUIsTUFBTSwyQ0FBMkMsQ0FBQztBQUNuRCxPQUFPLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUVoRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFNUQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFNUQsTUFBTSxPQUFPLFdBQVc7SUFDZixNQUFNLENBQUMsc0JBQXNCLENBQUMsT0FBMkI7UUFDOUQsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBRXBCLElBQUksT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ25CLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNuQixDQUFDO1FBRUQsa0JBQWtCLENBQUMsR0FBRyxFQUFFLENBQ3RCLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQztZQUM3QixPQUFPLEVBQUU7Z0JBQ1AsY0FBYztnQkFDZCxVQUFVLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLElBQUksRUFBRSxFQUFFLE9BQU8sQ0FBQyxXQUFXLElBQUksRUFBRSxDQUFDO2dCQUNuRSxHQUFHLENBQUMsT0FBTyxDQUFDLE9BQU8sSUFBSSxFQUFFLENBQUM7YUFDM0I7U0FDRixDQUFDLENBQUMsaUJBQWlCLEVBQUUsQ0FDdkIsQ0FBQztRQUVGLFdBQVcsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUU1QixPQUFPO1lBQ0wsSUFBSSxLQUFLO2dCQUNQLE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUMvQixDQUFDO1lBQ0QsSUFBSSxVQUFVO2dCQUNaLE9BQU8sT0FBTyxDQUFDO1lBQ2pCLENBQUM7U0FDRixDQUFDO0lBQ0osQ0FBQztJQUVPLE1BQU0sQ0FBQyxhQUFhO1FBQzFCLFdBQVcsQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUM3QixjQUFjLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQztJQUMvRCxDQUFDO0lBRU8sTUFBTSxDQUFDLFlBQVk7UUFDekIsT0FBTyxDQUFDLG9CQUFvQixFQUFFLENBQUM7UUFDL0IsT0FBTyxDQUFDLG1CQUFtQixDQUFDLDJCQUEyQixFQUFFLDZCQUE2QixFQUFFLEVBQUU7WUFDeEYsUUFBUSxFQUFFLEVBQUUsZ0JBQWdCLEVBQUUsSUFBSSxFQUFFO1NBQ3JDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTyxNQUFNLENBQUMsY0FBYyxDQUFDLFFBQVEsR0FBRyxVQUFVO1FBQ2pELE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDMUMsTUFBTSxPQUFPLEdBQUcsSUFBSSxpQkFBaUIsRUFBRSxDQUFDO1FBQ3hDLE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDN0MsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbEMsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwbGljYXRpb25SZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRlc3RCZWQsIFRlc3RCZWRTdGF0aWMgfSBmcm9tICdAYW5ndWxhci9jb3JlL3Rlc3RpbmcnO1xuaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgybVCcm93c2VyRG9tQWRhcHRlciBhcyBCcm93c2VyRG9tQWRhcHRlciB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuaW1wb3J0IHtcbiAgQnJvd3NlckR5bmFtaWNUZXN0aW5nTW9kdWxlLFxuICBwbGF0Zm9ybUJyb3dzZXJEeW5hbWljVGVzdGluZ1xufSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyLWR5bmFtaWMvdGVzdGluZyc7XG5pbXBvcnQgeyBOZ3hzTW9kdWxlLCBTdG9yZSB9IGZyb20gJ0BuZ3hzL3N0b3JlJztcblxuaW1wb3J0IHsgTmd4c1Rlc3RNb2R1bGUgfSBmcm9tICcuL2hlbHBlcnMvbmd4cy10ZXN0Lm1vZHVsZSc7XG5pbXBvcnQgeyBOZ3hzT3B0aW9uc1Rlc3RpbmcsIE5neHNUZXN0aW5nIH0gZnJvbSAnLi9zeW1ib2wnO1xuaW1wb3J0IHsgc2tpcENvbnNvbGVMb2dnaW5nIH0gZnJvbSAnLi9za2lwLWNvbnNvbGUtbG9nZ2luZyc7XG5cbmV4cG9ydCBjbGFzcyBOZ3hzVGVzdEJlZCB7XG4gIHB1YmxpYyBzdGF0aWMgY29uZmlndXJlVGVzdGluZ1N0YXRlcyhvcHRpb25zOiBOZ3hzT3B0aW9uc1Rlc3RpbmcpOiBOZ3hzVGVzdGluZyB7XG4gICAgdGhpcy5yZXNldFRlc3RCZWQoKTtcblxuICAgIGlmIChvcHRpb25zLmJlZm9yZSkge1xuICAgICAgb3B0aW9ucy5iZWZvcmUoKTtcbiAgICB9XG5cbiAgICBza2lwQ29uc29sZUxvZ2dpbmcoKCkgPT5cbiAgICAgIFRlc3RCZWQuY29uZmlndXJlVGVzdGluZ01vZHVsZSh7XG4gICAgICAgIGltcG9ydHM6IFtcbiAgICAgICAgICBOZ3hzVGVzdE1vZHVsZSxcbiAgICAgICAgICBOZ3hzTW9kdWxlLmZvclJvb3Qob3B0aW9ucy5zdGF0ZXMgfHwgW10sIG9wdGlvbnMubmd4c09wdGlvbnMgfHwge30pLFxuICAgICAgICAgIC4uLihvcHRpb25zLmltcG9ydHMgfHwgW10pXG4gICAgICAgIF1cbiAgICAgIH0pLmNvbXBpbGVDb21wb25lbnRzKClcbiAgICApO1xuXG4gICAgTmd4c1Rlc3RCZWQubmd4c0Jvb3RzdHJhcCgpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGdldCBzdG9yZSgpOiBTdG9yZSB7XG4gICAgICAgIHJldHVybiBUZXN0QmVkLmluamVjdChTdG9yZSk7XG4gICAgICB9LFxuICAgICAgZ2V0IGdldFRlc3RCZWQoKTogVGVzdEJlZFN0YXRpYyB7XG4gICAgICAgIHJldHVybiBUZXN0QmVkO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyBuZ3hzQm9vdHN0cmFwKCk6IHZvaWQge1xuICAgIE5neHNUZXN0QmVkLmNyZWF0ZVJvb3ROb2RlKCk7XG4gICAgTmd4c1Rlc3RNb2R1bGUubmdEb0Jvb3RzdHJhcChUZXN0QmVkLmluamVjdChBcHBsaWNhdGlvblJlZikpO1xuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgcmVzZXRUZXN0QmVkKCk6IHZvaWQge1xuICAgIFRlc3RCZWQucmVzZXRUZXN0RW52aXJvbm1lbnQoKTtcbiAgICBUZXN0QmVkLmluaXRUZXN0RW52aXJvbm1lbnQoQnJvd3NlckR5bmFtaWNUZXN0aW5nTW9kdWxlLCBwbGF0Zm9ybUJyb3dzZXJEeW5hbWljVGVzdGluZygpLCB7XG4gICAgICB0ZWFyZG93bjogeyBkZXN0cm95QWZ0ZXJFYWNoOiB0cnVlIH1cbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIGNyZWF0ZVJvb3ROb2RlKHNlbGVjdG9yID0gJ2FwcC1yb290Jyk6IHZvaWQge1xuICAgIGNvbnN0IGRvY3VtZW50ID0gVGVzdEJlZC5pbmplY3QoRE9DVU1FTlQpO1xuICAgIGNvbnN0IGFkYXB0ZXIgPSBuZXcgQnJvd3NlckRvbUFkYXB0ZXIoKTtcbiAgICBjb25zdCByb290ID0gYWRhcHRlci5jcmVhdGVFbGVtZW50KHNlbGVjdG9yKTtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHJvb3QpO1xuICB9XG59XG4iXX0=