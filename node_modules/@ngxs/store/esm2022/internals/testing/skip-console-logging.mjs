export function loggedError(message) {
    return ['error', [expect.objectContaining({ message })]];
}
export function skipConsoleLogging(fn, consoleRecorder = []) {
    const consoleSpies = [
        jest.spyOn(console, 'log').mockImplementation((...args) => {
            consoleRecorder.push(['log', args]);
        }),
        jest.spyOn(console, 'warn').mockImplementation((...args) => {
            consoleRecorder.push(['warn', args]);
        }),
        jest.spyOn(console, 'error').mockImplementation((...args) => {
            consoleRecorder.push(['error', args]);
        }),
        jest.spyOn(console, 'info').mockImplementation((...args) => {
            consoleRecorder.push(['info', args]);
        })
    ];
    function restoreSpies() {
        consoleSpies.forEach(spy => spy.mockRestore());
    }
    let restoreSpyAsync = false;
    try {
        const returnValue = fn();
        if (returnValue instanceof Promise) {
            restoreSpyAsync = true;
            return returnValue.finally(() => restoreSpies());
        }
        return returnValue;
    }
    finally {
        if (!restoreSpyAsync) {
            restoreSpies();
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tpcC1jb25zb2xlLWxvZ2dpbmcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9zdG9yZS9pbnRlcm5hbHMvdGVzdGluZy9zcmMvc2tpcC1jb25zb2xlLWxvZ2dpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxVQUFVLFdBQVcsQ0FBQyxPQUFlO0lBQ3pDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMzRCxDQUFDO0FBRUQsTUFBTSxVQUFVLGtCQUFrQixDQUNoQyxFQUFLLEVBQ0wsa0JBQW1DLEVBQUU7SUFFckMsTUFBTSxZQUFZLEdBQUc7UUFDbkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxHQUFHLElBQUksRUFBRSxFQUFFO1lBQ3hELGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUN0QyxDQUFDLENBQUM7UUFDRixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLEdBQUcsSUFBSSxFQUFFLEVBQUU7WUFDekQsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3ZDLENBQUMsQ0FBQztRQUNGLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDLGtCQUFrQixDQUFDLENBQUMsR0FBRyxJQUFJLEVBQUUsRUFBRTtZQUMxRCxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDeEMsQ0FBQyxDQUFDO1FBQ0YsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxHQUFHLElBQUksRUFBRSxFQUFFO1lBQ3pELGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUN2QyxDQUFDLENBQUM7S0FDSCxDQUFDO0lBQ0YsU0FBUyxZQUFZO1FBQ25CLFlBQVksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBQ0QsSUFBSSxlQUFlLEdBQUcsS0FBSyxDQUFDO0lBQzVCLElBQUksQ0FBQztRQUNILE1BQU0sV0FBVyxHQUFHLEVBQUUsRUFBRSxDQUFDO1FBQ3pCLElBQUksV0FBVyxZQUFZLE9BQU8sRUFBRSxDQUFDO1lBQ25DLGVBQWUsR0FBRyxJQUFJLENBQUM7WUFDdkIsT0FBTyxXQUFXLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFrQixDQUFDO1FBQ3BFLENBQUM7UUFDRCxPQUFPLFdBQVcsQ0FBQztJQUNyQixDQUFDO1lBQVMsQ0FBQztRQUNULElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztZQUNyQixZQUFZLEVBQUUsQ0FBQztRQUNqQixDQUFDO0lBQ0gsQ0FBQztBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdHlwZSBDb25zb2xlUmVjb3JkID0gW3N0cmluZywgYW55W11dO1xuZXhwb3J0IHR5cGUgQ29uc29sZVJlY29yZGVyID0gQ29uc29sZVJlY29yZFtdO1xuXG5leHBvcnQgZnVuY3Rpb24gbG9nZ2VkRXJyb3IobWVzc2FnZTogc3RyaW5nKTogQ29uc29sZVJlY29yZCB7XG4gIHJldHVybiBbJ2Vycm9yJywgW2V4cGVjdC5vYmplY3RDb250YWluaW5nKHsgbWVzc2FnZSB9KV1dO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2tpcENvbnNvbGVMb2dnaW5nPFQgZXh0ZW5kcyAoLi4uYXJnczogYW55W10pID0+IGFueT4oXG4gIGZuOiBULFxuICBjb25zb2xlUmVjb3JkZXI6IENvbnNvbGVSZWNvcmRlciA9IFtdXG4pOiBSZXR1cm5UeXBlPFQ+IHtcbiAgY29uc3QgY29uc29sZVNwaWVzID0gW1xuICAgIGplc3Quc3B5T24oY29uc29sZSwgJ2xvZycpLm1vY2tJbXBsZW1lbnRhdGlvbigoLi4uYXJncykgPT4ge1xuICAgICAgY29uc29sZVJlY29yZGVyLnB1c2goWydsb2cnLCBhcmdzXSk7XG4gICAgfSksXG4gICAgamVzdC5zcHlPbihjb25zb2xlLCAnd2FybicpLm1vY2tJbXBsZW1lbnRhdGlvbigoLi4uYXJncykgPT4ge1xuICAgICAgY29uc29sZVJlY29yZGVyLnB1c2goWyd3YXJuJywgYXJnc10pO1xuICAgIH0pLFxuICAgIGplc3Quc3B5T24oY29uc29sZSwgJ2Vycm9yJykubW9ja0ltcGxlbWVudGF0aW9uKCguLi5hcmdzKSA9PiB7XG4gICAgICBjb25zb2xlUmVjb3JkZXIucHVzaChbJ2Vycm9yJywgYXJnc10pO1xuICAgIH0pLFxuICAgIGplc3Quc3B5T24oY29uc29sZSwgJ2luZm8nKS5tb2NrSW1wbGVtZW50YXRpb24oKC4uLmFyZ3MpID0+IHtcbiAgICAgIGNvbnNvbGVSZWNvcmRlci5wdXNoKFsnaW5mbycsIGFyZ3NdKTtcbiAgICB9KVxuICBdO1xuICBmdW5jdGlvbiByZXN0b3JlU3BpZXMoKSB7XG4gICAgY29uc29sZVNwaWVzLmZvckVhY2goc3B5ID0+IHNweS5tb2NrUmVzdG9yZSgpKTtcbiAgfVxuICBsZXQgcmVzdG9yZVNweUFzeW5jID0gZmFsc2U7XG4gIHRyeSB7XG4gICAgY29uc3QgcmV0dXJuVmFsdWUgPSBmbigpO1xuICAgIGlmIChyZXR1cm5WYWx1ZSBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgIHJlc3RvcmVTcHlBc3luYyA9IHRydWU7XG4gICAgICByZXR1cm4gcmV0dXJuVmFsdWUuZmluYWxseSgoKSA9PiByZXN0b3JlU3BpZXMoKSkgYXMgUmV0dXJuVHlwZTxUPjtcbiAgICB9XG4gICAgcmV0dXJuIHJldHVyblZhbHVlO1xuICB9IGZpbmFsbHkge1xuICAgIGlmICghcmVzdG9yZVNweUFzeW5jKSB7XG4gICAgICByZXN0b3JlU3BpZXMoKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==