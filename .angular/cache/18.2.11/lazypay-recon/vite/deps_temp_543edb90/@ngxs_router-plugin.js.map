{
  "version": 3,
  "sources": ["../../../../../../node_modules/@ngxs/router-plugin/fesm2022/ngxs-router-plugin-internals.mjs", "../../../../../../node_modules/@ngxs/router-plugin/fesm2022/ngxs-router-plugin.mjs"],
  "sourcesContent": ["import { InjectionToken } from '@angular/core';\nconst NG_DEV_MODE = typeof ngDevMode !== 'undefined' && ngDevMode;\nconst ɵUSER_OPTIONS = new InjectionToken(NG_DEV_MODE ? 'USER_OPTIONS' : '', {\n  providedIn: 'root',\n  factory: () => undefined\n});\nconst ɵNGXS_ROUTER_PLUGIN_OPTIONS = new InjectionToken(NG_DEV_MODE ? 'NGXS_ROUTER_PLUGIN_OPTIONS' : '', {\n  providedIn: 'root',\n  factory: () => ({})\n});\nfunction ɵcreateRouterPluginOptions(options) {\n  return {\n    navigationActionTiming: options && options.navigationActionTiming || 1 /* NavigationActionTiming.PreActivation */\n  };\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ɵNGXS_ROUTER_PLUGIN_OPTIONS, ɵUSER_OPTIONS, ɵcreateRouterPluginOptions };\n", "import * as i0 from '@angular/core';\nimport { NgZone, Injector, Injectable, NgModule, makeEnvironmentProviders } from '@angular/core';\nimport * as i1 from '@ngxs/store';\nimport { StateToken, createSelector, Action, State, Store, NgxsModule, provideStates } from '@ngxs/store';\nimport { ɵNGXS_ROUTER_PLUGIN_OPTIONS as _NGXS_ROUTER_PLUGIN_OPTIONS, ɵUSER_OPTIONS as _USER_OPTIONS, ɵcreateRouterPluginOptions as _createRouterPluginOptions } from '@ngxs/router-plugin/internals';\nimport { __decorate, __metadata } from 'tslib';\nimport * as i2 from '@angular/router';\nimport { NavigationStart, RoutesRecognized, ResolveEnd, NavigationCancel, NavigationError, NavigationEnd, Router } from '@angular/router';\nimport { ReplaySubject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n/**\n * Public event api of the router\n */\nclass Navigate {\n  static {\n    this.type = '[Router] Navigate';\n  }\n  constructor(path, queryParams, extras) {\n    this.path = path;\n    this.queryParams = queryParams;\n    this.extras = extras;\n  }\n}\n/**\n *\n * Angular Routers internal state events\n *\n */\n/**\n * An action dispatched when the router starts the navigation.\n */\nclass RouterRequest {\n  static {\n    this.type = '[Router] RouterRequest';\n  }\n  constructor(routerState, event, trigger = 'none') {\n    this.routerState = routerState;\n    this.event = event;\n    this.trigger = trigger;\n  }\n}\n/**\n * An action dispatched when the router navigates.\n */\nclass RouterNavigation {\n  static {\n    this.type = '[Router] RouterNavigation';\n  }\n  constructor(routerState, event, trigger = 'none') {\n    this.routerState = routerState;\n    this.event = event;\n    this.trigger = trigger;\n  }\n}\n/**\n * An action dispatched when the router cancel navigation.\n */\nclass RouterCancel {\n  static {\n    this.type = '[Router] RouterCancel';\n  }\n  constructor(routerState, storeState, event, trigger = 'none') {\n    this.routerState = routerState;\n    this.storeState = storeState;\n    this.event = event;\n    this.trigger = trigger;\n  }\n}\n/**\n * An action dispatched when the router errors.\n */\nclass RouterError {\n  static {\n    this.type = '[Router] RouterError';\n  }\n  constructor(routerState, storeState, event, trigger = 'none') {\n    this.routerState = routerState;\n    this.storeState = storeState;\n    this.event = event;\n    this.trigger = trigger;\n  }\n}\n/**\n * An action dispatched when the `ResolveEnd` event is triggered.\n */\nclass RouterDataResolved {\n  static {\n    this.type = '[Router] RouterDataResolved';\n  }\n  constructor(routerState, event, trigger = 'none') {\n    this.routerState = routerState;\n    this.event = event;\n    this.trigger = trigger;\n  }\n}\n/**\n * An action dispatched when the router navigation has been finished successfully.\n */\nclass RouterNavigated {\n  static {\n    this.type = '[Router] RouterNavigated';\n  }\n  constructor(routerState, event, trigger = 'none') {\n    this.routerState = routerState;\n    this.event = event;\n    this.trigger = trigger;\n  }\n}\nclass RouterStateSerializer {}\nclass DefaultRouterStateSerializer {\n  serialize(routerState) {\n    return {\n      root: this.serializeRoute(routerState.root),\n      url: routerState.url\n    };\n  }\n  serializeRoute(route) {\n    const children = route.children.map(c => this.serializeRoute(c));\n    return {\n      url: route.url,\n      title: route.title,\n      params: route.params,\n      queryParams: route.queryParams,\n      fragment: route.fragment,\n      data: route.data,\n      outlet: route.outlet,\n      component: null,\n      routeConfig: null,\n      root: null,\n      parent: null,\n      firstChild: children[0],\n      children: children,\n      pathFromRoot: null,\n      paramMap: route.paramMap,\n      queryParamMap: route.queryParamMap,\n      toString: route.toString\n    };\n  }\n}\n\n// NGXS doesn't permit untyped selectors, such as `select(RouterState)`,\n// as the `RouterState` class itself lacks type information. Therefore,\n// the following state token must replace `RouterState`.\nconst ROUTER_STATE_TOKEN = new StateToken('router');\nlet RouterState = class RouterState {\n  static {\n    this.state = createSelector([ROUTER_STATE_TOKEN], state => {\n      // The `state` is optional if the selector is invoked before the router\n      // state is registered in NGXS.\n      return state?.state;\n    });\n  }\n  static {\n    this.url = createSelector([ROUTER_STATE_TOKEN], state => state?.state?.url);\n  }\n  constructor(_store, _router, _serializer, _ngZone, injector) {\n    this._store = _store;\n    this._router = _router;\n    this._serializer = _serializer;\n    this._ngZone = _ngZone;\n    /**\n     * Determines how navigation was performed by the `RouterState` itself\n     * or outside via `new Navigate(...)`\n     */\n    this._trigger = 'none';\n    /**\n     * That's the serialized state from the `Router` class\n     */\n    this._routerState = null;\n    /**\n     * That's the value of the `RouterState` state\n     */\n    this._storeState = null;\n    this._lastEvent = null;\n    this._options = null;\n    this._destroy$ = new ReplaySubject(1);\n    // Note: do not use `@Inject` since it fails on lower versions of Angular with Jest\n    // integration, it cannot resolve the token provider.\n    this._options = injector.get(_NGXS_ROUTER_PLUGIN_OPTIONS, null);\n    this._setUpStoreListener();\n    this._setUpRouterEventsListener();\n  }\n  ngOnDestroy() {\n    this._destroy$.next();\n  }\n  navigate(_, action) {\n    return this._ngZone.run(() => this._router.navigate(action.path, {\n      queryParams: action.queryParams,\n      ...action.extras\n    }));\n  }\n  angularRouterAction(ctx, action) {\n    ctx.setState({\n      trigger: action.trigger,\n      state: action.routerState,\n      navigationId: action.event.id\n    });\n  }\n  _setUpStoreListener() {\n    const routerState$ = this._store.select(ROUTER_STATE_TOKEN).pipe(takeUntil(this._destroy$));\n    routerState$.subscribe(state => {\n      this._navigateIfNeeded(state);\n    });\n  }\n  _navigateIfNeeded(routerState) {\n    if (routerState && routerState.trigger === 'devtools') {\n      this._storeState = this._store.selectSnapshot(ROUTER_STATE_TOKEN);\n    }\n    const canSkipNavigation = !this._storeState || !this._storeState.state || !routerState || routerState.trigger === 'router' || this._router.url === this._storeState.state.url || this._lastEvent instanceof NavigationStart;\n    if (canSkipNavigation) {\n      return;\n    }\n    this._storeState = this._store.selectSnapshot(ROUTER_STATE_TOKEN);\n    this._trigger = 'store';\n    this._ngZone.run(() => this._router.navigateByUrl(this._storeState.state.url));\n  }\n  _setUpRouterEventsListener() {\n    const dispatchRouterNavigationLate = this._options != null && this._options.navigationActionTiming === 2 /* NavigationActionTiming.PostActivation */;\n    let lastRoutesRecognized;\n    const events$ = this._router.events.pipe(takeUntil(this._destroy$));\n    events$.subscribe(event => {\n      this._lastEvent = event;\n      if (event instanceof NavigationStart) {\n        this._navigationStart(event);\n      } else if (event instanceof RoutesRecognized) {\n        lastRoutesRecognized = event;\n        if (!dispatchRouterNavigationLate && this._trigger !== 'store') {\n          this._dispatchRouterNavigation(lastRoutesRecognized);\n        }\n      } else if (event instanceof ResolveEnd) {\n        this._dispatchRouterDataResolved(event);\n      } else if (event instanceof NavigationCancel) {\n        this._dispatchRouterCancel(event);\n        this._reset();\n      } else if (event instanceof NavigationError) {\n        this._dispatchRouterError(event);\n        this._reset();\n      } else if (event instanceof NavigationEnd) {\n        if (this._trigger !== 'store') {\n          if (dispatchRouterNavigationLate) {\n            this._dispatchRouterNavigation(lastRoutesRecognized);\n          }\n          this._dispatchRouterNavigated(event);\n        }\n        this._reset();\n      }\n    });\n  }\n  /** Reacts to `NavigationStart`. */\n  _navigationStart(event) {\n    this._routerState = this._serializer.serialize(this._router.routerState.snapshot);\n    if (this._trigger !== 'none') {\n      this._storeState = this._store.selectSnapshot(ROUTER_STATE_TOKEN);\n      this._dispatchRouterAction(new RouterRequest(this._routerState, event, this._trigger));\n    }\n  }\n  /** Reacts to `ResolveEnd`. */\n  _dispatchRouterDataResolved(event) {\n    const routerState = this._serializer.serialize(event.state);\n    this._dispatchRouterAction(new RouterDataResolved(routerState, event, this._trigger));\n  }\n  /** Reacts to `RoutesRecognized` or `NavigationEnd`, depends on the `navigationActionTiming`. */\n  _dispatchRouterNavigation(lastRoutesRecognized) {\n    const nextRouterState = this._serializer.serialize(lastRoutesRecognized.state);\n    this._dispatchRouterAction(new RouterNavigation(nextRouterState, new RoutesRecognized(lastRoutesRecognized.id, lastRoutesRecognized.url, lastRoutesRecognized.urlAfterRedirects, nextRouterState), this._trigger));\n  }\n  /** Reacts to `NavigationCancel`. */\n  _dispatchRouterCancel(event) {\n    this._dispatchRouterAction(new RouterCancel(this._routerState, this._storeState, event, this._trigger));\n  }\n  /** Reacts to `NavigationEnd`. */\n  _dispatchRouterError(event) {\n    this._dispatchRouterAction(new RouterError(this._routerState, this._storeState, new NavigationError(event.id, event.url, `${event}`), this._trigger));\n  }\n  /** Reacts to `NavigationEnd`. */\n  _dispatchRouterNavigated(event) {\n    const routerState = this._serializer.serialize(this._router.routerState.snapshot);\n    this._dispatchRouterAction(new RouterNavigated(routerState, event, this._trigger));\n  }\n  _dispatchRouterAction(action) {\n    this._trigger = 'router';\n    try {\n      this._store.dispatch(action);\n    } finally {\n      this._trigger = 'none';\n    }\n  }\n  _reset() {\n    this._trigger = 'none';\n    this._storeState = null;\n    this._routerState = null;\n  }\n  /** @nocollapse */\n  static {\n    this.ɵfac = function RouterState_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || RouterState)(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.Router), i0.ɵɵinject(RouterStateSerializer), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i0.Injector));\n    };\n  }\n  /** @nocollapse */\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: RouterState,\n      factory: RouterState.ɵfac\n    });\n  }\n};\n__decorate([Action(Navigate), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object, Navigate]), __metadata(\"design:returntype\", void 0)], RouterState.prototype, \"navigate\", null);\n__decorate([Action([RouterRequest, RouterNavigation, RouterError, RouterCancel, RouterDataResolved, RouterNavigated]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object, Object]), __metadata(\"design:returntype\", void 0)], RouterState.prototype, \"angularRouterAction\", null);\nRouterState = __decorate([State({\n  name: ROUTER_STATE_TOKEN,\n  defaults: {\n    state: undefined,\n    navigationId: undefined,\n    trigger: 'none'\n  }\n}), __metadata(\"design:paramtypes\", [Store, Router, RouterStateSerializer, NgZone, Injector])], RouterState);\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RouterState, [{\n    type: Injectable\n  }], () => [{\n    type: i1.Store\n  }, {\n    type: i2.Router\n  }, {\n    type: RouterStateSerializer\n  }, {\n    type: i0.NgZone\n  }, {\n    type: i0.Injector\n  }], {\n    navigate: [],\n    angularRouterAction: []\n  });\n})();\nclass NgxsRouterPluginModule {\n  static forRoot(options) {\n    return {\n      ngModule: NgxsRouterPluginModule,\n      providers: [{\n        provide: _USER_OPTIONS,\n        useValue: options\n      }, {\n        provide: _NGXS_ROUTER_PLUGIN_OPTIONS,\n        useFactory: _createRouterPluginOptions,\n        deps: [_USER_OPTIONS]\n      }, {\n        provide: RouterStateSerializer,\n        useClass: DefaultRouterStateSerializer\n      }]\n    };\n  }\n  /** @nocollapse */\n  static {\n    this.ɵfac = function NgxsRouterPluginModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || NgxsRouterPluginModule)();\n    };\n  }\n  /** @nocollapse */\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: NgxsRouterPluginModule,\n      imports: [i1.ɵNgxsFeatureModule]\n    });\n  }\n  /** @nocollapse */\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      imports: [NgxsModule.forFeature([RouterState])]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxsRouterPluginModule, [{\n    type: NgModule,\n    args: [{\n      imports: [NgxsModule.forFeature([RouterState])]\n    }]\n  }], null, null);\n})();\nfunction withNgxsRouterPlugin(options) {\n  return makeEnvironmentProviders([provideStates([RouterState]), {\n    provide: _USER_OPTIONS,\n    useValue: options\n  }, {\n    provide: _NGXS_ROUTER_PLUGIN_OPTIONS,\n    useFactory: _createRouterPluginOptions,\n    deps: [_USER_OPTIONS]\n  }, {\n    provide: RouterStateSerializer,\n    useClass: DefaultRouterStateSerializer\n  }]);\n}\n\n/**\n * The public api for consumers of @ngxs/router-plugin\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DefaultRouterStateSerializer, Navigate, NgxsRouterPluginModule, ROUTER_STATE_TOKEN, RouterCancel, RouterDataResolved, RouterError, RouterNavigated, RouterNavigation, RouterRequest, RouterState, RouterStateSerializer, withNgxsRouterPlugin };\n"],
  "mappings": "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",
  "names": ["RouterState"]
}
